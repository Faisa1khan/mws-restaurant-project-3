onOnline=(()=>{document.querySelector("body").classList.remove("offline"),DBHelper.getOfflineReviews().then(e=>{DBHelper.clearOfflineReviews().then(()=>{e.forEach(e=>postReview(e.data))})})}),onOffline=(()=>{document.querySelector("body").classList.add("offline")}),postReview=(e=>{var t=new Headers;t.set("Accept","application/json");var n=new FormData;for(var r in e)e.hasOwnProperty(r)&&n.append(r,e[r]);fetch("http://localhost:1337/reviews/",{method:"POST",headers:t,body:n}).then(e=>e.json()).then(e=>{e.restaurant_id=parseInt(e.restaurant_id),e.rating=parseInt(e.rating),DBHelper.updateReviews(e.restaurant_id)}).catch(t=>{console.error(t),DBHelper.storeOfflineReview(e)})}),window.addEventListener("online",onOnline),window.addEventListener("offline",onOffline);class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static openDatabase(){return idb.open("MWS",3,function(e){switch(e.oldVersion){case 0:case 1:var t=e.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("cuisine","cuisine_type"),t.createIndex("neighborhood","neighborhood");case 2:console.log("Upgrading to DB v2.0"),e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id");case 3:console.log("Upgrading to DB v3.0");e.createObjectStore("offline_reviews",{keyPath:"id"})}})}static getRestaurants(){return new Promise((e,t)=>{DBHelper.openDatabase().then(n=>{n.transaction("restaurants").objectStore("restaurants").getAll().then(n=>{n&&n.length>0?e(n):DBHelper.updateRestaurants().then(t=>{e(t)}).catch(t)})}).catch(t)})}static getReviews(e){return new Promise((t,n)=>{DBHelper.openDatabase().then(r=>{r.transaction("reviews").objectStore("reviews").index("restaurant").getAll(e).then(r=>{r&&r.length>0?t(r):DBHelper.updateReviews(e).then(e=>{t(e)}).catch(n)})}).catch(n)})}static updateReviews(e){return new Promise((t,n)=>{fetch(DBHelper.DATABASE_URL+"/reviews?restaurant_id="+e).then(n=>{n.json().then(n=>{DBHelper.openDatabase().then(e=>{var t=e.transaction("reviews","readwrite").objectStore("reviews");n.forEach(e=>{e.restaurant_id=parseInt(e.restaurant_id),e.rating=parseInt(e.rating),t.put(e)})});var r=new CustomEvent("reviews_updated",{detail:{restaurant_id:e}});return document.dispatchEvent(r),t(n)})})})}static storeOfflineReview(e){DBHelper.openDatabase().then(t=>{t.transaction("offline_reviews","readwrite").objectStore("offline_reviews").add({id:Date.now(),data:e})})}static getOfflineReviews(){return new Promise((e,t)=>{DBHelper.openDatabase().then(n=>{n.transaction("offline_reviews").objectStore("offline_reviews").getAll().then(t=>e(t)).catch(e=>{t(e)})})})}static clearOfflineReviews(){return new Promise((e,t)=>{DBHelper.openDatabase().then(t=>{return t.transaction("offline_reviews","readwrite").objectStore("offline_reviews").clear(),e()}).catch(t)})}static updateRestaurants(){return new Promise((e,t)=>{fetch(DBHelper.DATABASE_URL+"/restaurants").then(t=>{t.json().then(t=>(DBHelper.openDatabase().then(e=>{var n=e.transaction("restaurants","readwrite").objectStore("restaurants");t.forEach(e=>{e.is_favorite=!!e.is_favorite&&"true"==e.is_favorite.toString(),n.put(e)})}),DBHelper.updateReviews(),e(t)))})})}static fetchRestaurantById(e,t){DBHelper.openDatabase().then(n=>{n.transaction("restaurants").objectStore("restaurants").get(parseInt(e)).then(e=>{t(null,e)}).catch(e=>{t(e,null)})})}static fetchReviewsForRestaurantId(e){return new Promise((t,n)=>{DBHelper.openDatabase().then(n=>{return n.transaction("reviews").objectStore("reviews").index("restaurant").getAll(parseInt(e)).then(t).catch(e=>{console.error("Could not get reviews for Restaurant",e),t([])})})})}static fetchRestaurantByCuisine(e,t){DBHelper.openDatabase().then(t=>{return t.transaction("restaurants").objectStore("restaurants").index("cuisine").get(e)}).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantByNeighborhood(e,t){DBHelper.openDatabase().then(t=>{return t.transaction("restaurants").objectStore("restaurants").index("neighborhood").get(e)}).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.getRestaurants().then(r=>{"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}).catch(e=>{n(e,null)})}static fetchNeighborhoods(e){DBHelper.getRestaurants().then(t=>{const n=t.map((e,n)=>t[n].neighborhood);e(null,n.filter((e,t)=>n.indexOf(e)==t))})}static fetchCuisines(e){DBHelper.getRestaurants().then(t=>{const n=t.map((e,n)=>t[n].cuisine_type);e(null,n.filter((e,t)=>n.indexOf(e)==t))})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static webPImageUrlForRestaurant(e){return`dist/img/webp/${e.photograph}.webp`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpeg`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}}!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,r){var o,a=new Promise(function(a,i){e(o=t[n].apply(t,r)).then(a,i)});return a.request=o,a}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]}})})}function r(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return t(this[n],o,arguments)})})}function o(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function a(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[n],(r=t(e,o,arguments)).then(function(e){if(e)return new s(e,r.request)});var e,r})})}function i(e){this._index=e}function s(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function u(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new u(n)}function p(e){this._db=e}n(i,"_index",["name","keyPath","multiEntry","unique"]),r(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(s,"_cursor",["direction","key","primaryKey","value"]),r(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(s.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(e){if(e)return new s(e,n._request)})})})}),c.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},n(c,"_store",["name","keyPath","indexNames","autoIncrement"]),r(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getAllKeys","count"]),a(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(c,"_store",IDBObjectStore,["deleteIndex"]),u.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},n(u,"_tx",["objectStoreNames","mode"]),o(u,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new u(this._db.transaction.apply(this._db,arguments))},n(p,"_db",["name","version","objectStoreNames"]),o(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,i].forEach(function(t){t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=(this._store||this._index)[e].apply(this._store,n.slice(0,-1));o.onsuccess=function(){r(o.result)}}})}),[i,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var h={open:function(e,n,r){var o=t(indexedDB,"open",[e,n]),a=o.request;return a.onupgradeneeded=function(e){r&&r(new l(a.result,e.oldVersion,a.transaction))},o.then(function(e){return new p(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?module.exports=h:self.idb=h}();